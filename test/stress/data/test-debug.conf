[General]
# HZP scan strategy, possible values are "classic", "inplace". Default is "classic"
HZP_scan_strategy=inplace
hazard_pointer_count=72

# cds::gc::DHP initialization parameters
dhp_liberate_threshold=1024
dhp_init_guard_count=8
dhp_epoch_count=16

# cds::urcu::gc initialization parameters
rcu_buffer_size=256


[Stack_Push]
ThreadCount=8
StackSize=100000
EliminationSize=4

[Stack_PushPop]
PushThreadCount=16
PopThreadCount=16
StackSize=1600000
EliminationSize=4

[IntrusiveStack_PushPop]
PushThreadCount=16
PopThreadCount=16
StackSize=1600000
EliminationSize=4
# Flat combining stack parameters
# FCIterate=1 - the test will be run iteratively
#   for combine pass count from 1 to FCCombinePassCount
#   and compact factor from 1 to FCCompactFactor
# FCIterate=0 - the test runs only once for giving
#   FCCombinePassCount and FCCompactFactor
FCIterate=0
FCCombinePassCount=4
FCCompactFactor=64

[queue_push]
ThreadCount=4
QueueSize=100000
# SegmentedQueue parameters:
# SegmentedQueue_Iterate: 
#    1 - run test iteratively for segment size from 4 up to SegmentedQueue_SegmentSize
#    0 - run test for segment size equal to SegmentedQueue_SegmentSize
SegmentedQueue_Iterate=0
SegmentedQueue_SegmentSize=64

[queue_pop]
ThreadCount=8
QueueSize=100000
# SegmentedQueue parameters:
# SegmentedQueue_Iterate: 
#    1 - run test iteratively for segment size from 4 up to SegmentedQueue_SegmentSize
#    0 - run test for segment size equal to SegmentedQueue_SegmentSize
SegmentedQueue_Iterate=0
SegmentedQueue_SegmentSize=64

[queue_push_pop]
ProducerCount=3
ConsumerCount=3
QueueSize=100000
# HeavyValueSize - size of value for flat cobining containers, default 100
# HeavyValueSize=100
# SegmentedQueue parameters:
# SegmentedQueue_Iterate: 
#    1 - run test iteratively for segment size from 4 up to SegmentedQueue_SegmentSize
#    0 - run test for segment size equal to SegmentedQueue_SegmentSize
SegmentedQueue_Iterate=0
SegmentedQueue_SegmentSize=64

[queue_random]
ThreadCount=4
QueueSize=500000
# SegmentedQueue parameters:
# SegmentedQueue_Iterate: 
#    1 - run test iteratively for segment size from 4 up to SegmentedQueue_SegmentSize
#    0 - run test for segment size equal to SegmentedQueue_SegmentSize
SegmentedQueue_Iterate=0
SegmentedQueue_SegmentSize=64

[intrusive_queue_push_pop]
ReaderCount=3
WriterCount=3
QueueSize=100000
# Flat combining queue parameters
FCCompactFactor=64
FCPassCount=8
# SegmentedQueue parameters:
# SegmentedQueue_Iterate: 
#    1 - run test iteratively for segment size from 4 up to SegmentedQueue_SegmentSize
#    0 - run test for segment size equal to SegmentedQueue_SegmentSize
SegmentedQueue_Iterate=0
SegmentedQueue_SegmentSize=64

[bounded_queue_fulness]
ThreadCount=4
QueueSize=1024
PassCount=100000

[pqueue_pop]
ThreadCount=4
QueueSize=10000

[pqueue_push]
ThreadCount=4
QueueSize=10000

[pqueue_push_pop]
PushThreadCount=4
PopThreadCount=4
QueueSize=10000

[Map_Nonconcurrent_iterator]
MapSize=1000000

[Map_Nonconcurrent_iterator_MT]
ThreadCount=4
MapSize=1000000

[map_find_int]
ThreadCount=2
MapSize=10000
PercentExists=50
PassCount=2
MaxLoadFactor=4

# *** Cuckoo map properties
CuckooInitialSize=256
CuckooProbesetSize=8
# 0 - use default
CuckooProbesetThreshold=0

# *** FeldmanHashMap properties
FeldmanMapHeadBits=8
FeldmanMapArrayBits=4

[map_find_string]
ThreadCount=2
MapSize=10000
PercentExists=50
PassCount=2
MaxLoadFactor=4

# *** Cuckoo map properties
CuckooInitialSize=256
CuckooProbesetSize=8
# 0 - use default
CuckooProbesetThreshold=0

# *** FeldmanHashMap properties
FeldmanMapHeadBits=8
FeldmanMapArrayBits=4

[map_insdel_int]
InsertThreadCount=3
DeleteThreadCount=3
ThreadPassCount=2
MapSize=30000
MaxLoadFactor=4

# *** Cuckoo map properties
CuckooInitialSize=256
CuckooProbesetSize=8
# 0 - use default
CuckooProbesetThreshold=0

# *** FeldmanHashMap properties
FeldmanMapHeadBits=8
FeldmanMapArrayBits=4

[map_insdel_func]
InsertThreadCount=2
DeleteThreadCount=2
UpdateThreadCount=2
ThreadPassCount=6
MapSize=10000
MaxLoadFactor=4

# *** Cuckoo map properties
CuckooInitialSize=256
CuckooProbesetSize=8
# 0 - use default
CuckooProbesetThreshold=0

# *** FeldmanHashMap properties
FeldmanMapHeadBits=8
FeldmanMapArrayBits=4

[map_insdel_item_int]
InsertThreadCount=4
DeleteThreadCount=4
MapSize=5000
GoalItem=2500
AttemptCount=500
MaxLoadFactor=4

# *** Cuckoo map properties
CuckooInitialSize=256
CuckooProbesetSize=8
# 0 - use default
CuckooProbesetThreshold=0

# *** FeldmanHashMap properties
FeldmanMapHeadBits=8
FeldmanMapArrayBits=4

[map_insdel_string]
InsertThreadCount=4
DeleteThreadCount=4
ThreadPassCount=4
MapSize=20000
MaxLoadFactor=4
PrintGCStateFlag=1

# *** Cuckoo map properties
CuckooInitialSize=256
CuckooProbesetSize=8
# 0 - use default
CuckooProbesetThreshold=0

# *** FeldmanHashMap properties
FeldmanMapHeadBits=8
FeldmanMapArrayBits=4

[map_insfind_int]
ThreadCount=0
MapSize=2000
MaxLoadFactor=4

# *** Cuckoo map properties
CuckooInitialSize=256
CuckooProbesetSize=8
# 0 - use default
CuckooProbesetThreshold=0

# *** FeldmanHashMap properties
FeldmanMapHeadBits=8
FeldmanMapArrayBits=4

[map_insdelfind]
InitialMapSize=50000
ThreadCount=4
MaxLoadFactor=8
InsertPercentage=20
DeletePercentage=20
Duration=3

# *** Cuckoo map properties
CuckooInitialSize=256
CuckooProbesetSize=8
# 0 - use default
CuckooProbesetThreshold=0

# *** FeldmanHashMap properties
FeldmanMapHeadBits=8
FeldmanMapArrayBits=4

[map_delodd]
MapSize=10000
InsThreadCount=3
DelThreadCount=2
ExtractThreadCount=2
FindThreadCount=2
MaxLoadFactor=4
PassCount=30

#Cuckoo map properties
CuckooInitialSize=256
CuckooProbesetSize=8
# 0 - use default
CuckooProbesetThreshold=0

# *** FeldmanHashMap properties
FeldmanMapHeadBits=8
FeldmanMapArrayBits=4

[free_list]
ThreadCount=4
PassCount=100000